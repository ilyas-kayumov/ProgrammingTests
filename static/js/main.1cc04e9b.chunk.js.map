{"version":3,"sources":["serviceWorker.js","WebHeader.jsx","index.js"],"names":["Boolean","window","location","hostname","match","WebHeader","props","bg","expand","Brand","href","onClick","renderTests","className","Link","testsNames","getTestHTML","path","a","fetch","then","response","text","getTestJson","index","json","currentQuestion","correctAnswers","currentCorrect","getQuestion","answers","question","map","answer","i","type","name","id","value","for","correct","html","code","dangerouslySetInnerHTML","__html","renderQuestion","testIndex","undefined","checkedAnswer","Array","from","document","getElementsByName","find","r","checked","rtest","length","questions","questionCode","ReactDOM","render","Body","Title","title","Text","getElementById","tests","testsHTML","test","Item","action","getTests","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1cc04e9b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\n\nexport default function WebHeader(props) {\n    return (\n        <Navbar bg=\"light\" expand=\"lg\">\n            <Navbar.Brand href=\"#\" onClick={props.renderTests}>Тесты по программированию</Navbar.Brand>\n            <Nav className=\"mr-auto\">\n                <Nav.Link href=\"#\" onClick={props.renderTests}>C# / .NET</Nav.Link>\n            </Nav>\n        </Navbar>\n    );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport TestStatus from \"./TestStatus.jsx\";\nimport WebHeader from \"./WebHeader.jsx\";\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport './index.css';\n\nlet testsNames =\n  [\n    \"Объявление и инициализация переменных\",\n    \"Арифметические операции\",\n    \"Логические операции\",\n    \"Условия\"\n  ];\n\nasync function getTestHTML(path) {\n  return await fetch(path)\n    .then(response => response.text());\n}\n\nasync function getTestJson(index) {\n  return await fetch(\"tests/test\" + index + \".json\")\n    .then(response => response.json());\n}\n\nfunction getTests(tests) {\n  currentQuestion = 0;\n  correctAnswers = 0;\n  const testsHTML = tests.map((test, i) => <ListGroup.Item action onClick={() => renderQuestion(i)}>{test}</ListGroup.Item>);\n  return (\n    <div>\n      <WebHeader renderTests={renderTests}></WebHeader>\n      <Card>\n        <Card.Body>\n          <Card.Title>Тесты по C# / .NET</Card.Title>\n          <Card.Text>\n            <ListGroup>\n              {testsHTML}\n            </ListGroup>\n          </Card.Text>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n}\n\nlet currentQuestion = 0;\nlet correctAnswers = 0;\nlet currentCorrect = 0;\n\nfunction getQuestion(props) {\n  const answers = props.question.answers.map((answer, i) => <div><input type=\"radio\" name=\"answer\" id={\"answer\" + i} value={i} /><label for={\"answer\" + i}><code>{answer}</code></label></div>);\n  currentCorrect = props.question.correct;\n\n  let html = props.question.question + props.code;\n\n  return (\n    <form>\n      <p dangerouslySetInnerHTML={{ __html: html }}></p>\n      {answers}\n      <hr />\n      <Button onClick={() => renderQuestion(props.testIndex)}>Далее</Button>\n    </form>\n  );\n}\n\nasync function renderQuestion(i) {\n  if (currentQuestion > 0) {\n    const checkedAnswer = Array.from(document.getElementsByName(\"answer\")).find(r => r.checked);\n\n    if (checkedAnswer == undefined) {\n      return;\n    }\n\n    let correct = checkedAnswer.value == currentCorrect;\n    if (correct) {\n      correctAnswers++;\n    }\n    checkedAnswer.checked = false;\n  }\n\n  let rtest = await getTestJson(i);\n\n  if (currentQuestion < rtest[\"questions\"].length) {\n\n    let code = \"\";\n    if (rtest.questions[currentQuestion].questionCode != undefined) {\n      code = await getTestHTML(rtest.questions[currentQuestion].questionCode);\n    }\n\n    let question = getQuestion({ code: code, question: rtest.questions[currentQuestion], testIndex: i });\n    ReactDOM.render(\n      <div>\n        <WebHeader renderTests={renderTests}></WebHeader>\n        <Card>\n          <Card.Body>\n            <Card.Title>{rtest.title}</Card.Title>\n            <hr />\n            <Card.Text>\n              {question}\n            </Card.Text>\n          </Card.Body>\n        </Card>\n      </div>,\n      document.getElementById('root')\n    );\n    currentQuestion++;\n  }\n  else {\n    ReactDOM.render(\n      <div>\n      <WebHeader renderTests={renderTests}></WebHeader>\n        <Card>\n          <Card.Body>\n            <Card.Title>{rtest.title}</Card.Title>\n            <hr />\n            <Card.Text>\n              Результат: {correctAnswers} / {rtest.questions.length}\n            </Card.Text>\n          </Card.Body>\n        </Card>\n      </div>,\n      document.getElementById('root')\n    );\n  }\n}\n\nfunction renderTests() {\n  let tests = getTests(testsNames);\n\n  ReactDOM.render(\n    tests,\n    document.getElementById('root')\n  );\n}\nrenderTests();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}